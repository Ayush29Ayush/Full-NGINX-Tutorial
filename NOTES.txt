#? How SSL Works -> "https://youtu.be/0yw-z6f7Mb4?si=taKmSLcAcdbC7hYc"

#? Full NGINX Tutorial - Demo Project with Node.js, Docker
Refer -> "https://www.youtube.com/watch?v=q8OleYuqntY"

#! Intro & Course Overview

The introduction to the video "Full NGINX Tutorial - Demo Project with Node.js, Docker" states that the video will:
● Explain NGINX, including what it is used for, its main use cases, and why it was created.
● Provide a hands-on demo using a simple Node.js application. This demo will include:
    ○ A Node.js application that serves an index.html file.
    ○ Three instances of the application running as Docker containers. Viewers will write the code and configuration themselves to gain a deeper understanding.
● Install and configure NGINX as a reverse proxy to load balance requests to the application instances.
    ○ This section will teach viewers how NGINX configuration works and how to work with NGINX in general.
● Show viewers how to configure a secure HTTPS connection to the application using NGINX.
    ○ This will include enabling SSL and configuring NGINX with a self-signed TLS certificate.
● The video will explain all the steps and configuration details in detail. The goal is to help viewers understand every concept, going beyond a basic surface-level understanding.


#! What is NGINX? What is NGINX used for?
● Before NGINX, a web server would assemble a web page and send it to the user's browser.
● NGINX is a high performance web server that runs on a server machine and can respond to requests from a browser.
● With NGINX, requests from a browser are handled by a load balancer, which proxies the requests to multiple web servers.

What NGINX does:
● Load Balancing: NGINX distributes the load among the web servers.
● Caching: NGINX can store a final copy of a page and send it to every user who requests it.
● Security: NGINX acts as a security shield for servers, reduces the attack surface, and encrypts communications.
● Compression: NGINX can compress large images and video files, saving bandwidth for both the user and server.
● Reverse Proxy: NGINX receives incoming traffic and forwards it to the right service.

NGINX is best because:
● It is fast and efficient.
● It is easy to use and configure.
● It is open source and free to use.
● It is flexible and scalable
● Low Resource Usage

#! How to configure NGINX?
Question: How to tell NGINX whether to act as a web server or a proxy server?
Question: How do you configure the caching, SSL, etc?

Answer: All this is done in the configuration file of nginx called "nginx.conf" file which is usually located in the "/etc/nginx" directory.

To configure NGINX as a reverse proxy and load balancer, you primarily work with the nginx.conf configuration file.
Key Configuration Points:
● Performance and Resource Management:
    ○ worker_processes: Define the number of worker processes. In production, setting it to "Auto" or aligning it with the number of CPU cores is recommended.
    ○ events: Within this context, configure worker_connections to determine how many simultaneous connections each worker process can handle.

● HTTP Server and Proxy Configuration:
    ○ http Block: Contains the primary configuration for handling HTTP requests.
        ■ server Block: Define how NGINX listens for and handles requests.
            ●listen: Specify the port NGINX listens on (e.g., 8080 for HTTP, 443 for HTTPS).
            ●server_name: Set the domain or IP address (e.g., "localhost").
            ●location: Define rules for handling requests to specific URL paths.

● Reverse Proxy Setup:
    ○ proxy_pass: Explicitly configure NGINX to act as a reverse proxy, forwarding requests to a defined upstream group of backend servers.
    ○ upstream Block: Define a named group of backend servers (e.g., "nodejs_cluster"). List the server addresses and ports.

    ● Header Modification:
    ○ proxy_set_header: Modify headers in requests forwarded to upstream servers. Important examples include:
        ■ Host: Forward the original host header to the backend.
        ■ X-Real-IP: Pass the client’s IP address to the backend.

● Content-Type Handling:
    ○ include mime.types: Include the MIME type of files in responses (e.g., "text/html" for HTML).

● Load Balancing Algorithm:
    ○ least_conn (within an upstream block): Configure NGINX to use the "least connections" algorithm, directing requests to the backend server with the fewest active connections.

● HTTPS (SSL) Configuration:
    ○ ssl_certificate: Specify the path to your SSL certificate file.
    ○ ssl_certificate_key: Specify the path to your private key file.

● Redirection:
    ○ return 301: Redirect requests from one location to another, commonly used to force all traffic to HTTPS.

Important: After making configuration changes, reload or restart NGINX for them to take effect.

#! Demo Project
1. Create a index.html file which uses images from images folder.
2. Create a server.js file which uses express to serve the index.html file along with the static files like images and styles.
3. Create a .env file which contains the APP_NAME variable.
4. Create a package.json file which contains the dependencies like express,path and dotenv.
5. Install the dependencies using npm install.

6. Now we will dockerize our app and put nginx proxy in front of our application. 
7. Due to this, rather than the user request coming directly to node.js server, it will first go to the nginx proxy and then nginx proxy will forward the request to the node.js server.
8. Download docker and docker desktop from the official website. "https://docs.docker.com/engine/install/ubuntu/#install-using-the-repository" and "https://docs.docker.com/desktop/setup/install/linux/ubuntu/"
9. Lets dockerize our application where we will start 3 instances of the node.js server as docker containers.
    * Create a dockerfile which contains the instructions(blueprint) to build the docker image, defining what goes into the image and how the container should behave when it runs.
    * Create a docker image which is a standalone execution environment for our application which includes everything needed to run our application. It's a snapshot of an environment that can be used to create and run our application.
    * Use command "docker build -t ayush-nginx-crash-course-app:1.0 ." to build the docker image.
    * Check the docker image using command "docker images | grep ayush-nginx-crash-course-app"
    * Now that we have the docker image, we can now easily run multiple instances of node.js server without any conflicts.

    * Now lets run our application using docker containers from our newly created docker image. Use command "docker run -p 3000:3000 -d ayush-nginx-crash-course-app:1.0"
    * To check the containers running, use command "docker ps" and to list all the containers, use command "docker ps -a"
    * To stop the container, use command "docker stop <container_id>"

    * To start multiple instances of node.js server, we will use docker compose. Docker Compose is a tool for defining and running multi-container Docker applications. It uses a YAML file to configure services and their dependencies.
    * To start multiple instances of node.js server using docker compose, use command "docker compose up --build -d"
    * To check logs of the containers, use command "docker compose logs -f <service_name>". For example, "docker compose logs -f app1"
    * Second way to check logs is to use the container_id. Use command "docker logs <container_id>". For example, "docker logs <container_id>"

#! Install NGINX and configure it as a reverse proxy
10. How we will install NGINX
    * It will help us LOAD BALANCE our application.
    * It will help us HANDLE SSL encryption and enforce HTTPS.

    * Install NGINX using command "sudo apt update && sudo apt install nginx"
    * Check if NGINX is installed using command "nginx -v"
    * To know the location of nginx, use command "whereis nginx" or "nginx -V"
    * To know the location of nginx configuration file, use command "sudo find / -name nginx.conf"

    ---------------------------------------------------
    #! Do not do this until needed
    * To completely remove nginx from your system, use command "sudo apt-get purge nginx nginx-common nginx-full"
    * To install nginx again, use command "sudo apt-get install nginx"
    * In your browser, go to "http://localhost" to check if NGINX is running or not
    --------------------------------------------------

    * To open NGINX configuration file in VS code, use command "code /etc/nginx/nginx.conf" 

11. In terms of Nginx:
    * Directives: Key Value pairs to configure NGINX. Example:- "listen 80;", "worker_processes 1;", etc
    * Context: NGINX configuration context. Example:- "events {}", "http {}", "server {}", etc

#! Start NGINX and Test Load Balancing
12. For version 1 of NGINX setup without SSL, refer file "nginx-version-1.conf"
13. Now run these following commands:
    * Start docker containers using command "docker compose up --build -d"
    * To start NGINX, use command "sudo systemctl start nginx"
    * To reload NGINX, use command "sudo systemctl reload nginx"
    * To restart NGINX, use command "sudo systemctl restart nginx"

    * Stop docker containers using command "docker compose down"
    * To stop NGINX, use command "sudo systemctl stop nginx"

14. Use command "docker compose up --build" to start the containers in attached mode.


15. Right now, when we go to "localhost:8080", we access the proxy server using nginx and when we go to "localhost:3000", we access the node.js server directly.
Ques? Should we have the individual backend server also exposed to internet?
    * No, since nginx itself is a proxy web server, we should not expose it to internet. 
    * We should only expose the frontend to the internet. 
    * You will only open port 8080 or whichever port Nginx listens to.
    * All other ports will not be publicly accessible.