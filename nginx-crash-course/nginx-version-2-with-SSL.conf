# Main context (global configuration)
#? What is a "Worker Process"?
#! It is an Nginx directive.
#! Instead of using a new process for every incoming connecttion, Nginx uses worker processes that handle many connections using a single threaded event loop.
#! The value should be set according to the CPU cores available on the server's hardware and expected traffic load. 
#! In Production, number of worker processes, usually equal to the number of CPU cores. Can be set to "Auto" to automatically detect the number of CPU cores. 
worker_processes 1;  # Controls how many parallel processes Nginx spawns to handle client requests.

#? What is a "Worker Connection"?
#! It is an Nginx directive.
#! It's per worker process: how many simultaneous connections can a worker process handle. 
#! If we set worker_processes to 1 and worker_connections to 1024, then 1024 connections can be handled by a single worker process. So for worker_processes = 2, we can handle 2 * 1024 = 2048 connections.
events {
    worker_connections 1024;  # Maximum number of simultaneous connections per worker process
}

http {
    include mime.types;  # Include mime types file to define file types for proper content negotiation

    # Upstream block defines the backend Node.js servers for load balancing
    #! Load balancing: Nginx distributes the load among the web servers, by default it is round-robin
    upstream nodejs_cluster {
        least_conn; # Use the "least connections" algorithm
        server 127.0.0.1:3001;  # Backend Node.js server on port 3001
        server 127.0.0.1:3002;  # Backend Node.js server on port 3002
        server 127.0.0.1:3003;  # Backend Node.js server on port 3003
    }

    # Server block to handle incoming HTTPS traffic
    server {
        listen 443 ssl;  # Listen for HTTPS traffic on port 443 which is the default HTTPS port
        server_name localhost;  # The server name (domain) for this block, typically set to the domain name of your site

        # SSL configuration for HTTPS
        ssl_certificate /home/ayush/Desktop/Full-NGINX-Tutorial-with-Node.js-and-Docker/nginx-crash-course/my-self-signed-nginx-certificates/nginx-selfsigned.crt;  # Path to SSL public key certificate file (self-signed in this case)
        ssl_certificate_key /home/ayush/Desktop/Full-NGINX-Tutorial-with-Node.js-and-Docker/nginx-crash-course/my-self-signed-nginx-certificates/nginx-selfsigned.key;  # Path to SSL private key file
        
        # Proxy settings for forwarding requests to the Node.js backend cluster
        location / {
            proxy_pass http://nodejs_cluster;  # Forward requests to the upstream "nodejs_cluster"
            proxy_set_header Host $host;  # Preserve the original Host header from the client
            proxy_set_header X-Real-IP $remote_addr;  # Pass the original client IP address to the backend
            #! Many more headers can be added here, for now we'll keep it simple
        }
    }

    # Optional server block to redirect HTTP traffic to HTTPS
    server {
        listen 8080;  # Listen for HTTP traffic on port 80 (default HTTP port)
        server_name localhost;  # The server name (domain) for the HTTP block

        # Redirect all HTTP traffic to HTTPS using a 301 permanent redirect
        location / {
            return 301 https://$host$request_uri;  # Redirect HTTP requests to HTTPS with the same host and URI
        }
    }
}
